<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%"
		  height="100%"
		  paddingLeft="{GridConstants.UI_PADDING}"
		  paddingRight="{GridConstants.UI_PADDING}"
		  paddingTop="{GridConstants.UI_PADDING}"
		  paddingBottom="{GridConstants.UI_PADDING}"
		  xmlns:components="com.rga.pearson.view.components.*"
		  gap="0"
		  xmlns:mx="library://ns.adobe.com/flex/mx">


	<fx:Metadata>
		[Event(name="update_assets", type="com.rga.pearson.event.AssetSliderEvent")]
	</fx:Metadata>


	<fx:Script>
		<![CDATA[
			import com.rga.pearson.event.AssetSliderEvent;
			import com.rga.pearson.model.constants.AssetConstants;
			import com.rga.pearson.model.constants.GridConstants;
			import com.rga.pearson.model.vo.AssetConfigVO;

			import mx.collections.ArrayCollection;

			private var _assetsVo : AssetConfigVO;


			public function setTotals( assets:AssetConfigVO ):void
			{
				books.maximumAssets = assets.maximum;
				books.currentAssets = assets.getAsset( AssetConstants.BOOKS );

				docs.maximumAssets = assets.maximum;
				docs.currentAssets = assets.getAsset( AssetConstants.DOCUMENTS );

				images.maximumAssets = assets.maximum;
				images.currentAssets = assets.getAsset( AssetConstants.IMAGES );

				interactive.maximumAssets = assets.maximum;
				interactive.currentAssets = assets.getAsset( AssetConstants.INTERACTIVE );

				videos.maximumAssets = assets.maximum;
				videos.currentAssets = assets.getAsset( AssetConstants.VIDEOS );

				_assetsVo = assets;
			}


			/**
			 * Returns the AssetSliderVo updated with all slider's data
			 */
			public function updateAssetsVo( assetsVo:AssetConfigVO ):AssetConfigVO
			{
				assetsVo.updateAsset( AssetConstants.BOOKS, books.slider.value, false );
				assetsVo.updateAsset( AssetConstants.DOCUMENTS, docs.slider.value, false );
				assetsVo.updateAsset( AssetConstants.IMAGES, images.slider.value, false );
				assetsVo.updateAsset( AssetConstants.INTERACTIVE, interactive.slider.value, false );
				assetsVo.updateAsset( AssetConstants.VIDEOS, videos.slider.value, false );
				assetsVo.updateTotals();
				return assetsVo;
			}


			/**
			 * Sets the main categories
			 */
			public function setCategories( val:ArrayCollection ):void
			{
				categories.dataProvider = val;
				categories.selectedIndex = 0;
			}


			/**
			 * Sets the sub categories
			 */
			public function setSubCategories( val:ArrayCollection ):void
			{
				subCategories.dataProvider = val;
				subCategories.selectedIndex = 0;
			}


			protected function assetslider1_updateHandler(event:AssetSliderEvent):void
			{
				event.stopImmediatePropagation();

				dispatchEvent( new AssetSliderEvent( AssetSliderEvent.UPDATE_ASSETS ));
			}
		]]>
	</fx:Script>


	<components:UIPanel title="Configuration">

		<s:HGroup>
			<s:Label text="Discipline"
					 styleName="iu_label"
					 width="100"/>
			<s:DropDownList id="categories"
							width="300"/>
		</s:HGroup>

		<s:HGroup>
			<s:Label text="Sub Category"
					 styleName="iu_label"
					 width="100"/>
			<s:DropDownList id="subCategories"
							width="300"/>
		</s:HGroup>

	</components:UIPanel>


	<components:UIPanel title="Asset specification">

		<components:AssetSlider id="books"
								text="{AssetConstants.BOOKS}"
								update_asset="assetslider1_updateHandler(event)"/>
		<components:AssetSlider id="videos"
								text="{AssetConstants.VIDEOS}"
								update_asset="assetslider1_updateHandler(event)"/>
		<components:AssetSlider id="images"
								text="{AssetConstants.IMAGES}"
								update_asset="assetslider1_updateHandler(event)"/>
		<components:AssetSlider id="docs"
								text="{AssetConstants.DOCUMENTS}"
								update_asset="assetslider1_updateHandler(event)"/>
		<components:AssetSlider id="interactive"
								text="{AssetConstants.INTERACTIVE}"
								update_asset="assetslider1_updateHandler(event)"/>

	</components:UIPanel>


	<components:UIPanel height="100"
						title="Colour distribution">

		<components:ColourSpectrum id="spectrum"/>

	</components:UIPanel>


	<components:UIPanel height="60">

		<components:layout>
			<s:VerticalLayout horizontalAlign="left"
							  verticalAlign="top"
							  gap="10"
							  paddingTop="20"
							  paddingRight="30"
							  paddingBottom="40"
							  paddingLeft="20"/>
		</components:layout>

		<s:Button id="renderButton"
				  label="Generate Mosaic"/>

	</components:UIPanel>



</s:VGroup>
