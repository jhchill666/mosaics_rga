<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:grid="com.rga.pearson.view.grid.*">



	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.rga.pearson.model.constants.ColourConstants;
			import com.rga.pearson.model.constants.GridConstants;
			import com.rga.pearson.utils.StringUtils;

			import mx.collections.ArrayCollection;

			private var segments:Vector.<GridCellSeqment> = new Vector.<GridCellSeqment>();

			private var _gridInitialised : Boolean = false;

			private var _isGridDirty : Boolean = false;

			private var _isTitleDirty : Boolean = false;

			private var _newGrid : ArrayCollection;

			private var _title : String;


			/**
			 * Re-renders the grid
			 */
			public function renderSegments( grid:ArrayCollection ):void
			{
				_isGridDirty = true;
				_newGrid = grid;

				invalidateDisplayList();
			}


			/**
			 * Re-renders the book title
			 */
			public function renderTitle( title:String = "" ):void
			{
				if( !StringUtils.isEmpty( title ) && title != _title )
				{
					_title = title;
					_isTitleDirty = true;
				}

				invalidateProperties();
			}


			/**
			 * @inheritDoc
			 */
			override protected function createChildren():void
			{
				super.createChildren();

				if( _gridInitialised )
					return;

				var i:int, j:int, numCells:int, segment:GridCellSeqment;

				numCells = ( GridConstants.NUM_ROWS * GridConstants.NUM_COLS );

				for( i = 0 ; i < numCells ; i++ )
				{
					for( j = 0 ; j < 2 ; j ++ )
					{
						segment = new GridCellSeqment();
						segment.isTopLeft = ( j == 0 );

						segment.x = ( i % GridConstants.NUM_COLS ) * GridConstants.CELL_SIZE;
						segment.y = Math.floor( i / GridConstants.NUM_COLS ) * GridConstants.CELL_SIZE;

						grid.addChild( segment );
						segments.push( segment );
					}
				}

				_gridInitialised = true;
			}


			/**
			 * @inheritDoc
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);

				if( !_isGridDirty )
					return;

				var i:int, numCells:int, numSeqments:int, segment:GridCellSeqment, count:int;

				numCells = ( GridConstants.NUM_ROWS * GridConstants.NUM_COLS );
				numSeqments = ( numCells * 2 );

				for( i = 0 ; i < numSeqments ; i++ )
				{
					segment = segments[i] as GridCellSeqment;
					segment.segment = _newGrid[i];

					if( _newGrid[i] != ColourConstants.INACTIVE_CELL )
						count ++;
				}
				_isGridDirty = false;

			}


			override protected function commitProperties():void
			{
				super.commitProperties();

				if( _isTitleDirty )
				{
					discipline.text = _title;

					discipline.alpha = 0;
					TweenLite.to( discipline, 0.4, { alpha:1 });

					_isTitleDirty = false;
				}
			}
		]]>
	</fx:Script>


	<mx:Image source="@Embed(source='/../assets/images/book_cover1.png')"/>

	<s:Group id="gridGroup"
			 left="180"
			 top="330">
		<mx:UIComponent id="grid"
						mask="{gridMask}"
						top="20"/>


		<grid:GridMask id="gridMask"
					   visible="false"
					   width="{GridConstants.NUM_COLS*GridConstants.CELL_SIZE}"
					   height="{GridConstants.NUM_ROWS*GridConstants.CELL_SIZE}"
					   top="20"/>
	</s:Group>

	<s:Label id="discipline"
			 width="450"
			 text="This is a long book title"
			 styleName="book_cover_title"
			 top="80"
			 left="30"/>

</s:Group>
